<svg viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <linearGradient id="sphereGradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#0066ff;stop-opacity:0.8" />
      <stop offset="100%" style="stop-color:#00ccff;stop-opacity:0.8" />
    </linearGradient>
    
    <filter id="glow">
      <feGaussianBlur stdDeviation="5" result="coloredBlur"/>
      <feMerge>
        <feMergeNode in="coloredBlur"/>
        <feMergeNode in="SourceGraphic"/>
      </feMerge>
    </filter>
    
    <pattern id="grid" width="40" height="40" patternUnits="userSpaceOnUse">
      <path d="M 40 0 L 0 0 0 40" fill="none" stroke="rgba(255,255,255,0.1)" stroke-width="0.5"/>
    </pattern>
  </defs>

  <!-- Main sphere -->
  <circle cx="250" cy="250" r="200" fill="url(#sphereGradient)" filter="url(#glow)" />
  
  <!-- Grid overlay -->
  <circle cx="250" cy="250" r="200" fill="url(#grid)" />
  
  <!-- Latitude lines -->
  <g transform="rotate(-20,250,250)">
    {[0, 30, 60, 90, 120, 150].map((angle) => (
      <ellipse 
        cx="250" 
        cy="250" 
        rx="200" 
        ry={200 * Math.cos(angle * Math.PI / 180)} 
        fill="none" 
        stroke="rgba(255,255,255,0.2)" 
        stroke-width="0.5" 
      />
    ))}
  </g>
  
  <!-- Longitude lines -->
  <g transform="rotate(-20,250,250)">
    {[0, 30, 60, 90, 120, 150, 180, 210, 240, 270, 300, 330].map((angle) => (
      <ellipse 
        cx="250" 
        cy="250" 
        rx={200 * Math.cos(angle * Math.PI / 180)} 
        ry="200" 
        fill="none" 
        stroke="rgba(255,255,255,0.2)" 
        stroke-width="0.5" 
      />
    ))}
  </g>
  
  <!-- Highlight -->
  <circle 
    cx="150" 
    cy="150" 
    r="15" 
    fill="white" 
    opacity="0.5" 
    filter="url(#glow)"
  />
</svg>